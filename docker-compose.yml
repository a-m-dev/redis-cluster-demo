version: "3.8"

services:
  # load balancer
  load_balancer:
    image: nginx:alpine
    container_name: load_balancer
    ports:
      - 8080:5000
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf

  # database
  postgres:
    image: postgres:13
    container_name: postgres_redis_cluster
    # command: ["postgres", "-c", "log_statement=all"]
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: appdb
    ports:
      - "5433:5432"
    volumes:
      - ./scripts/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
      - db:/var/lib/postgresql/data

  # backend services
  # here we spin up 5 backedn services together
  backend_one:
    image: "backend_app_one"
    build:
      context: .
    container_name: backend_app_one
    volumes:
      - .:/usr/src/app
    ports:
      - "4001:4000"
    environment:
      PORT: 4000
      EXPOSED_PORT: 4001
      REDIS_CLUSTER_URLS: "redis_1:6379,redis_2:6379,redis_3:6379,redis_4:6379,redis_5:6379,redis_6:6379"
    restart: always
    depends_on:
      - postgres
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.11

  backend_two:
    image: "backend_app_two"
    build:
      context: .
    container_name: backend_app_two
    volumes:
      - .:/usr/src/app
    ports:
      - "4002:4000"
    environment:
      PORT: 4000
      EXPOSED_PORT: 4002
      REDIS_CLUSTER_URLS: "redis_1:6379,redis_2:6379,redis_3:6379,redis_4:6379,redis_5:6379,redis_6:6379"
    restart: always
    depends_on:
      - postgres
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.12

  backend_three:
    image: "backend_app_three"
    build:
      context: .
    container_name: backend_app_three
    volumes:
      - .:/usr/src/app
    ports:
      - "4003:4000"
    environment:
      PORT: 4000
      EXPOSED_PORT: 4003
      REDIS_CLUSTER_URLS: "redis_1:6379,redis_2:6379,redis_3:6379,redis_4:6379,redis_5:6379,redis_6:6379"
    restart: always
    depends_on:
      - postgres
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.13

  backend_four:
    image: "backend_app_four"
    build:
      context: .
    container_name: backend_app_four
    volumes:
      - .:/usr/src/app
    ports:
      - "4004:4000"
    environment:
      PORT: 4000
      EXPOSED_PORT: 4004
      REDIS_CLUSTER_URLS: "redis_1:6379,redis_2:6379,redis_3:6379,redis_4:6379,redis_5:6379,redis_6:6379"
    restart: always
    depends_on:
      - postgres
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.14

  backend_five:
    image: "backend_app_five"
    build:
      context: .
    container_name: backend_app_five
    volumes:
      - .:/usr/src/app
    ports:
      - "4005:4000"
    environment:
      PORT: 4000
      EXPOSED_PORT: 4005
      REDIS_CLUSTER_URLS: "redis_1:6379,redis_2:6379,redis_3:6379,redis_4:6379,redis_5:6379,redis_6:6379"
    restart: always
    depends_on:
      - postgres
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.15

  # Here we have six Redis containers with Cluster mode enabled,
  # three of them will work as master nodes and each one of
  # will have a replica, so in case of failures, the replica becomes the master.
  # They are configured by the `cluster_initiator` container.
  redis_1:
    image: "redis:latest"
    container_name: redis_1
    ports:
      - "6379"
    volumes:
      - redis_1_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.2

  redis_2:
    image: "redis:latest"
    container_name: redis_2
    ports:
      - "6379"
    volumes:
      - redis_2_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.3

  redis_3:
    image: "redis:latest"
    container_name: redis_3
    ports:
      - "6379"
    volumes:
      - redis_3_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.4

  redis_4:
    image: "redis:latest"
    container_name: redis_4
    ports:
      - "6379"
    volumes:
      - redis_4_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.5

  redis_5:
    image: "redis:latest"
    container_name: redis_5
    ports:
      - "6379"
    volumes:
      - redis_5_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.6

  redis_6:
    image: "redis:latest"
    container_name: redis_6
    ports:
      - "6379"
    volumes:
      - redis_6_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.7

  # Ephemeral container to create the Redis cluster connections.
  # Once the setup is done, this container shuts down
  # and the cluster can be used by the service app container
  cluster_initiator:
    container_name: cluster_initiator
    build:
      context: redis
      dockerfile: Dockerfile
    tty: true
    depends_on:
      - redis_1
      - redis_2
      - redis_3
      - redis_4
      - redis_5
      - redis_6
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.8

  # Web UI to browse through our Redis data across all nodes
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_web
    environment:
      REDIS_HOSTS: "local:redis_1:6379,local:redis_2:6379,local:redis_3:6379"
    ports:
      - "5000:8081"
    depends_on:
      - redis_1
      - redis_2
      - redis_3
      - redis_4
      - redis_5
      - redis_6
      - cluster_initiator
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.9

volumes:
  db:
  redis_1_data: {}
  redis_2_data: {}
  redis_3_data: {}
  redis_4_data: {}
  redis_5_data: {}
  redis_6_data: {}

networks:
  redis_cluster_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.18.0.0/16
